// tools  headerfile 
#ifndef PP_TOOLS_CODE_VYV_1
#define PP_TOOLS_CODE_VYV_1

#define _MAX_PATHW			32768

//#include "./jpeglib/jpeglib.h"
#include "vklt.h"

typedef unsigned char uint8;
#if 0
const unsigned char GAMMA0_4[]={0,28,37,43,48,53,57,61,64,67,70,73,75,78,80,82,84,86,88,90,92,94,96,97,99,101,102,104,105,107,108,110,111,113,114,115,117,118,119,120,122,123,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,149,150,151,152,153,154,155,155,156,157,158,159,160,160,161,162,163,164,164,165,166,167,167,168,169,170,170,171,172,173,173,174,175,175,176,177,177,178,179,179,180,181,182,182,183,183,184,185,185,186,187,187,188,189,189,190,190,191,192,192,193,194,194,195,195,196,197,197,198,198,199,199,200,201,201,202,202,203,203,204,205,205,206,206,207,207,208,208,209,209,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,230,231,231,232,232,233,233,234,234,235,235,235,236,236,237,237,238,238,239,239,240,240,240,241,241,242,242,243,243,243,244,244,245,245,246,246,246,247,247,248,248,248,249,249,250,250,251,251,251,252,252,253,253,253,254,254,255,255};
const unsigned char GAMMA0_6[]={0,9,14,18,21,24,27,29,32,34,37,39,41,43,45,47,48,50,52,54,55,57,59,60,62,63,65,66,68,69,71,72,73,75,76,77,79,80,81,83,84,85,86,88,89,90,91,92,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,137,138,139,140,141,142,143,144,145,145,146,147,148,149,150,151,151,152,153,154,155,156,156,157,158,159,160,161,161,162,163,164,165,165,166,167,168,169,169,170,171,172,173,173,174,175,176,176,177,178,179,179,180,181,182,182,183,184,185,185,186,187,188,188,189,190,191,191,192,193,194,194,195,196,196,197,198,199,199,200,201,201,202,203,203,204,205,206,206,207,208,208,209,210,210,211,212,212,213,214,214,215,216,216,217,218,218,219,220,220,221,222,222,223,224,224,225,226,226,227,228,228,229,230,230,231,231,232,233,233,234,235,235,236,237,237,238,238,239,240,240,241,242,242,243,243,244,245,245,246,247,247,248,248,249,250,250,251,251,252,253,253,254,254,255};
const unsigned char GAMMA0_8[]={0,3,5,7,9,11,13,14,16,18,19,21,22,24,25,26,28,29,31,32,33,35,36,37,39,40,41,42,44,45,46,47,48,50,51,52,53,54,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,140,141,142,143,144,145,146,147,148,149,150,151,151,152,153,154,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,169,169,170,171,172,173,174,175,176,177,177,178,179,180,181,182,183,183,184,185,186,187,188,189,190,190,191,192,193,194,195,196,196,197,198,199,200,201,202,202,203,204,205,206,207,207,208,209,210,211,212,212,213,214,215,216,217,217,218,219,220,221,222,222,223,224,225,226,227,227,228,229,230,231,232,232,233,234,235,236,236,237,238,239,240,240,241,242,243,244,245,245,246,247,248,249,249,250,251,252,253,253,254,255};
const unsigned char GAMMA1_0[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255};
const unsigned char GAMMA1_2[]={0,0,1,1,2,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,27,28,28,29,30,31,32,33,34,34,35,36,37,38,39,40,40,41,42,43,44,45,46,47,48,49,49,50,51,52,53,54,55,56,57,58,59,60,61,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,173,175,176,177,178,179,180,181,183,184,185,186,187,188,189,191,192,193,194,195,196,197,199,200,201,202,203,204,205,207,208,209,210,211,212,214,215,216,217,218,219,221,222,223,224,225,226,228,229,230,231,232,234,235,236,237,238,239,241,242,243,244,245,247,248,249,250,251,253,254,255};
const unsigned char GAMMA1_4[]={0,0,0,1,1,1,1,2,2,2,3,3,4,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,12,12,13,13,14,15,15,16,16,17,18,18,19,20,20,21,22,22,23,24,25,25,26,27,28,28,29,30,31,31,32,33,34,34,35,36,37,38,38,39,40,41,42,43,43,44,45,46,47,48,49,49,50,51,52,53,54,55,56,57,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,124,125,126,127,128,129,130,132,133,134,135,136,137,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,166,168,169,170,171,173,174,175,176,178,179,180,181,183,184,185,187,188,189,190,192,193,194,196,197,198,200,201,202,203,205,206,207,209,210,211,213,214,215,217,218,219,221,222,223,225,226,227,229,230,232,233,234,236,237,238,240,241,242,244,245,247,248,249,251,252,254,255};
const unsigned char GAMMA1_6[]={0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,6,6,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,18,18,19,19,20,21,21,22,23,23,24,25,25,26,27,27,28,29,29,30,31,31,32,33,34,34,35,36,37,38,38,39,40,41,42,42,43,44,45,46,46,47,48,49,50,51,52,53,53,54,55,56,57,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,106,107,108,109,110,111,113,114,115,116,117,119,120,121,122,123,125,126,127,128,130,131,132,133,135,136,137,138,140,141,142,143,145,146,147,149,150,151,153,154,155,157,158,159,161,162,163,165,166,167,169,170,171,173,174,176,177,178,180,181,183,184,185,187,188,190,191,193,194,196,197,198,200,201,203,204,206,207,209,210,212,213,215,216,218,219,221,222,224,225,227,228,230,231,233,235,236,238,239,241,242,244,245,247,249,250,252,253,255};
const unsigned char GAMMA1_8[]={0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,6,6,6,7,7,8,8,8,9,9,10,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,21,21,22,22,23,24,24,25,26,26,27,28,28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,40,41,41,42,43,44,45,46,46,47,48,49,50,51,52,53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,104,105,107,108,109,110,111,113,114,115,116,118,119,120,122,123,124,126,127,128,129,131,132,134,135,136,138,139,140,142,143,145,146,147,149,150,152,153,154,156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,181,183,184,186,188,189,191,192,194,195,197,199,200,202,204,205,207,208,210,212,213,215,217,218,220,222,224,225,227,229,230,232,234,236,237,239,241,243,244,246,248,250,251,253,255};
const unsigned char GAMMA2_0[]={0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,11,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,23,23,24,24,25,26,26,27,28,28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,40,41,42,42,43,44,45,46,47,47,48,49,50,51,52,53,54,55,56,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,91,92,93,94,95,97,98,99,100,102,103,104,105,107,108,109,111,112,113,115,116,117,119,120,121,123,124,126,127,128,130,131,133,134,136,137,139,140,142,143,145,146,148,149,151,152,154,155,157,158,160,162,163,165,166,168,170,171,173,175,176,178,180,181,183,185,186,188,190,192,193,195,197,199,200,202,204,206,207,209,211,213,215,217,218,220,222,224,226,228,230,232,233,235,237,239,241,243,245,247,249,251,253,255};
#endif

const unsigned char GAMMA_BIG[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,6,6,6,7,7,8,9,9,10,11,11,12,13,14,15,16,17,18,19,21,22,24,25,27,29,31,33,35,38,40,43,45,48,52,55,58,62,66,70,75,79,84,90,95,101,107,114,121,128,136,144,153,162,171,181,192,203,215,228,241,255};

// define proportion's constant to test faces in image
#define TESTVSIZE1 1200
#define TESTVSIZE2 800
#define TESTEYE		256


typedef struct _GISTOGRAMM{
#define GESTSIZE 256
//#define COUNTPOS ((128/GESTSIZE))
	unsigned __int32 distr[GESTSIZE];
	__int32 maxpos;	// maximum position;
	__int32 mindif;	// minimum difference;
	__int32 maxdif; // maximum difference;
	__int32 minpos; // maximum difference;
	unsigned __int32 count;	// count pixels
	__int32 mto;
	_GISTOGRAMM(){
//		int i =  COUNTPOS;
		memset(this, 0, sizeof(_GISTOGRAMM));
	};

	inline void addvalue(unsigned char data){
//		int i = (data>>COUNTPOS);
		distr[(data&0xff/*>>COUNTPOS*/)]++;
		count++;
	};
	inline void clear(){
		memset(this, 0, sizeof(_GISTOGRAMM));
	};
	void CalcResults(){
		if (!count) {
			clear();
			return;
		}
		mto = 0;
		unsigned int level = 0;
		unsigned int mmin = count + 1;
		for (int i=0; i< GESTSIZE; i++){
			if ((distr[i] < mmin)&&(distr[i] !=0)){
				minpos = i;
				mmin = distr[i];
			}
			if (distr[i] > distr[maxpos]){
				mindif = distr[i] - distr[maxpos];
				maxpos = i;
			}
		}
		if (distr[maxpos] == count) {
			if (maxpos) minpos = maxpos -1;
			else minpos = maxpos + 1;
		}
		maxdif = distr[maxpos] - distr[minpos]; //abs(maxpos-minpos);//
		level = distr[maxpos]/4; // 0.25
		for (int i =0; i < GESTSIZE; i++){
			if (distr[i] > level) mto++;
		}
		if (mindif == 0){
			int secmax = maxpos -1;
			if (secmax <0) {
				secmax = maxpos + 1;
			}
			for (int i = 0; i < GESTSIZE; i++){
				if (distr[i] == distr[maxpos]) continue;
				//if ((distr[secmax])&&(distr[i] > distr[secmax]))
				if (distr[i] > distr[secmax])
					secmax = i;
			}
			mindif = distr[maxpos] - distr[secmax];

		}

	} ;

}GISTOGRAMM, *PGISTOGRAMM;



class CPChannel {
public:
	uint8 * arr;
	CPoint  sz;
	BITMAPINFO *bi;
	int bpp;
	int lmin;
	int lmax;
	GISTOGRAMM gist;

public:
	CPChannel();
	CPChannel(CPoint nsz);
	CPChannel(int width, int height);
	~CPChannel();
	int Init(int width, int height);
	int InitFromImage(/*int width, int height,*/ int offset, CImage & img);
	void Scale(CPChannel& img2);
	int Scale(int num, int num1, CPChannel& img2); // scale num1/num   num1> num 
	int Scale(int nwidth);
	int CPChannel::ScaleVarios(int nWidth, int nHeight, CPChannel& img2);

	void Gauss();
	int InitFromBitmap(int offset, Gdiplus::Bitmap * bmp);
	int InitFromCBitmap(int offset, BITMAP & bimg1 /*CBitmap & cBmp1*/);
	int DinDiap();
	int Gamma(unsigned char * GAMMA);
	int InitAs(int width, int height, CPChannel * pImg){
		int size = Init(width, height);
		if (size){
			bpp = pImg->bpp;
			lmin = pImg->lmin;
			lmax = pImg->lmax;

		}
		return size;
		
	};
	int FillHistogram(); // filling image histogramm;
	int Inverse();
	int Sobel();
	unsigned int Integrator();
	int SelectRect(int x, int y, int width, int height, CPChannel& img2);
	int SelectGoodPoints(INT_FeatureList &fl);
	bool GradientCreate(__int32 * filter, bool IsGauss = false);

	CPChannel & operator = (const CPChannel& src){
		if (this->Init(src.sz.x, src.sz.y)){
			int k = sz.x*sz.y;
			memcpy(this->arr, src.arr, k);
			this->bpp = src.bpp;
			this->lmin = src.lmin;
			this->lmax = src.lmax;

		}
		return *this;

	};

};


//void Gauss(unsigned char * matr, unsigned char * out , int nrows, int ncols);

//unsigned char *  scale (unsigned char * in,		// input
//						unsigned int row, unsigned int col, // matrix size
//						 int &u,  int &v,	// u/v - scale  
															// in u -returned new row and 
															// in v -returned new col and 
//						int bpp=3	// bytes per pixel
						
//);	

void testSobel(unsigned char * inptr, unsigned char * outptr, int rows, int column);

int CalcEvclid(int m_uM, int m_uN ); // calculate NOD
CString GetDirectory(HWND hWnd = 0, CString sPrompt = _T(""));
bool CheckFileExist(CString fname, DWORD dwAttrib=0); 	/* dwAtrib is combinatio this flags:
													//		FILE_ATTRIBUTE_DIRECTORY
													//		FILE_ATTRIBUTE_READONLY
													//		0 - any file
													*/


#endif // PP_TOOLS_CODE_VYV_1